<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机知识 on Baraka的博客</title>
    <link>https://baraka-sdw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 计算机知识 on Baraka的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn&#39;</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。</copyright>
    <lastBuildDate>Mon, 18 Nov 2019 17:35:54 +0800</lastBuildDate>
    
	<atom:link href="https://baraka-sdw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>什么是句柄？</title>
      <link>https://baraka-sdw.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%A5%E6%9F%84/</link>
      <pubDate>Mon, 18 Nov 2019 17:35:54 +0800</pubDate>
      
      <guid>https://baraka-sdw.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%A5%E6%9F%84/</guid>
      <description>从广义上，能够从一个数值拎起一大堆数据的东西都可以叫做句柄。句柄的英文是&amp;quot;Handle&amp;rdquo;，本义就是&amp;quot;柄&amp;rdquo;，只是在计算机科学中，被特别地翻译成&amp;quot;句柄&amp;rdquo;，其实还是个&amp;quot;柄&amp;rdquo;。从一个小东西拎起一大堆东西，这难道不像是个&amp;quot;柄&amp;quot;吗？
然后，指针其实也是一种&amp;quot;句柄&amp;rdquo;，只是由于指针同时拥有更特殊的含义——实实在在地对应内存里地一个地址——所以，通常不把指针说成是&amp;quot;句柄&amp;rdquo;。但指针也有着能从一个32位的值引用到一大堆数据的作用，这不是句柄又是什么？
Windows系统中有许多内核对象（这里的对象不完全等价于&amp;quot;面向对象程序设计&amp;quot;一词中的&amp;quot;对象&amp;rdquo;，虽然实质上还真差不多），比如打开的文件，创建的线程，程序的窗口，等等。这些重要的对象肯定不是4个字节或者8个字节足以完全描述的，他们拥有大量的属性。为了保存这样一个&amp;quot;对象&amp;quot;的状态，往往需要上百甚至上千字节的内存空间，那么怎么在程序间或程序内部的子过程（函数）之间传递这些数据呢？拖着这成百上千的字节拷贝来拷贝去吗？显然会浪费效率。那么怎么办？当然传递这些对象的首地址是一个办法，但这至少有两个缺点：
暴露了内核对象本身，使得程序（而不是操作系统内核）也可以任意地修改对象地内部状态（首地址都知道了，还有什么不能改的？），这显然是操作系统内核所不允许的； 操作系统有定期整理内存的责任，如果一些内存整理过一次后，对象被搬走了怎么办？ 所以，Windows操作系统就采用进一步的间接：在进程的地址空间中设一张表，表里头专门保存一些编号和由这个编号对应一个地址，而由那个地址去引用实际的对象，这个编号跟那个地址在数值上没有任何规律性的联系，纯粹是个映射而已。
在Windows系统中，这个编号就叫做&amp;quot;句柄&amp;rdquo;。Handle在Windows中的含义很广泛，以下关于谈到的Handle除非特别说明，将仅限于进程、线程的上下文中。
1、先来谈谈Handle Handle本身是一个32位的无符号整数，它用来代表一个内核对象。它并不指向实际的内核对象，用户模式下的程序永远不可能获得一个内核对象的实际地址（一般情况下）。那么Handle的意义何在？它实际上是作为一个索引在一个表中查找对应的内核对象的实际地址。那么这个表在哪里呢？每个进程都有这样的一个表，叫句柄表。该表的第一项就是进程自己的句柄，这也是为什么你调用GetCurrentProcess()总是返回0x7FFFFFFF原因。
简单地说，Handle就是一种用来&amp;quot;间接&amp;quot;代表一个内核对象的整数值。你可以在程序中使用handle来代表你想要操作的内核对象。这里的内核对象包括：事件（Event）、线程、进程、Mutex等等。我们最常见的就是文件句柄（file handle）。
另外要注意的是，Handle仅在其所属的进程中才有意义。将一个进程拥有的handle传给另一个进程没有任何意义，如果非要这么做，则需要使用DuplicateHandle()，在多个进程间传递Handle是另外一个话题了，与这里要讨论的无关。
2、进程ID 首先，进程ID是一个32位无符号整数，每个进程都有这样的一个ID，并且该ID在系统范围内是唯一的。系统使用该ID来唯一确定一个进程。
深入些说，系统可能使用进程ID来计算代表该进程的内核对象的基地址（及EPROCESS结构的基地址），具体的计算公式你可以去问微软的OS开发人员。
3、HINSTANCE HINSTANCE也是一个32无符号整数，它表示程序加载到内存中的基地址。</description>
    </item>
    
  </channel>
</rss>